// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Cannot overwrite loop variables within a block: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "function test(){
    let z = [];
    for (let x = 0; x < 2; x = x + 1) {
      x = 1;
    }
    return false;
}
test();",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 4: Assignment to a for loop variable in the for loop is not allowed.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Error when accessing temporal dead zone: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = 1;
function f() {
  display(a);
  const a = 5;
}
f();",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 3: Name a declared later in current scope but not yet assigned",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`In a block, every going-to-be-defined variable in the block cannot be accessed until it has been defined in the block.: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = 1;
{
  a + a;
  const a = 10;
}",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 3: Name a declared later in current scope but not yet assigned",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`No hoisting of functions. Only the name is hoisted like let and const: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "const v = f();
function f() {
  return 1;
}
v;",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 1: Name f declared later in current scope but not yet assigned",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Shadowed variables may not be assigned to until declared in the current scope: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "let variable = 1;
function test(){
  variable = 100;
  let variable = true;
  return variable;
}
test();",
  "displayResult": Array [],
  "numErrors": 1,
  "parsedErrors": "Line 3: Name variable not declared.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`Simple tail call returns work: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(x, y) {
  if (x <= 0) {
    return y;
  } else {
    return f(x-1, y+1);
  }
}
f(5000, 5000);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 10000,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Tail call in boolean operators work: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(x, y) {
  if (x <= 0) {
    return y;
  } else {
    return false || f(x-1, y+1);
  }
}
f(5000, 5000);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 10000,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Tail call in conditional expressions work: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(x, y) {
  return x <= 0 ? y : f(x-1, y+1);
}
f(5000, 5000);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 10000,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Tail call in nested mix of conditional expressions boolean operators work: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(x, y) {
  return x <= 0 ? y : false || x > 0 ? f(x-1, y+1) : 'unreachable';
}
f(5000, 5000);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 10000,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Tail calls in arrow block functions work: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const f = (x, y) => {
  if (x <= 0) {
    return y;
  } else {
    return f(x-1, y+1);
  }
};
f(5000, 5000);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 10000,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Tail calls in arrow functions work: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const f = (x, y) => x <= 0 ? y : f(x-1, y+1);
f(5000, 5000);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 10000,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Tail calls in mixed tail-call/non-tail-call recursion work: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(x, y, z) {
  if (x <= 0) {
    return y;
  } else {
    return f(x-1, y+f(0, z, 0), z);
  }
}
f(5000, 5000, 2);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 15000,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Tail calls in mutual recursion with arrow functions work: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const f = (x, y) => x <= 0 ? y : g(x-1, y+1);
const g = (x, y) => x <= 0 ? y : f(x-1, y+1);
f(5000, 5000);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 10000,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`Tail calls in mutual recursion work: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(x, y) {
  if (x <= 0) {
    return y;
  } else {
    return g(x-1, y+1);
  }
}
function g(x, y) {
  if (x <= 0) {
    return y;
  } else {
    return f(x-1, y+1);
  }
}
f(5000, 5000);",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": 10000,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`const uses block scoping instead of function scoping: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function test(){
  const x = true;
  if(true) {
      const x = false;
  } else {
      const x = false;
  }
  return x;
}
test();",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`let uses block scoping instead of function scoping: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function test(){
  let x = true;
  if(true) {
      let x = false;
  } else {
      let x = false;
  }
  return x;
}
test();",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`standalone block statements: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function test(){
  const x = true;
  {
      const x = false;
  }
  return x;
}
test();",
  "displayResult": Array [],
  "numErrors": 0,
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;
